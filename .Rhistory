sim <- function(times = 20, seed = 4300){
.seed <- .Random.seed
set.seed(seed)
on.exit(.Random.seed <- .seed)
do.call(rbind, lapply(seq_len(times), function(...){
data <- simulate_data()
data <- simulate_outcome(data)
model(data)
}))
}
kableExtra::kable(sim())
data <- simulate_data()
data <- simulate_outcome(data)
comparison <- model(data)
cat('are the estimates identical?\n')
print(comparison)
rm(list=ls())
library(lme4)
simulate_data <- function(){
totalobs <- 4 * 9 * 90 * 25
subplot <- rep(1:4, totalobs / 4)
plot <- rep(1:90, totalobs / 90)
time <- rep(2012:2020, totalobs / 9)
cover <- rep(runif(90), totalobs / 90)
# obs after sampling
nobs <- 55000
# Extract data sample
samp <- sample(nobs)
data.frame(subplot, plot, time, cover)[samp, ]
}
simulate_outcome <- function(data){
form <- out ~ cover + (1|time/plot/subplot)
glF <- glFormula(form, data = df)
rtrms <- glF$reTrms
Z <- t(rtrms$Zt)
# Pre-choose beta, sigma and b
beta <- c(-2, 0.75) # picked out of thin air
# We need a correlation matrix for our random effects.
# I go with the same definition as the one used by lme4
delta <- sqrt(c(.3, .7, 1.0))
lambda <- delta[rtrms$Lind] # crossprod(lambda) = sigma
u <- rnorm(ncol(Z))
eta <- glF$X %*% beta + Z %*% (lambda * u)
expit <- function(x)
1 / ( 1 + exp(-x) )
# Simulate our outcome vector
df$eaten <- rbinom(nobs, 1, prob = as.numeric(expit(eta)))
# Add not eaten for cbind method
df$not_eaten <- 1 - df$eaten
df
}
model <- function(data){
fit_standard <- glmer(eaten ~ cover + (1|time/plot/subplot), data = data, family = binomial)
fit_cbind <- glmer(cbind(eaten, not_eaten) ~ cover + (1|time/plot/subplot), data = data, family = binomial)
c(fixef = all.equal(fixef(fit_standard), fixef(fit_cbind)),
ranef = all.equal(ranef(fit_standard),ranef(fit_cbind)))
}
data <- simulate_data()
data <- simulate_outcome(data)
data
dim(data)
simulate_outcome(data)
debugonce(simulate_outcome)
simulate_outcome(data)
debugonce(simulate_outcome)
simulate_outcome(data)
df
?df
rm(list=ls())
library(lme4)
simulate_data <- function(){
totalobs <- 4 * 9 * 90 * 25
subplot <- rep(1:4, totalobs / 4)
plot <- rep(1:90, totalobs / 90)
time <- rep(2012:2020, totalobs / 9)
cover <- rep(runif(90), totalobs / 90)
# obs after sampling
nobs <- 55000
# Extract data sample
samp <- sample(nobs)
data.frame(subplot, plot, time, cover)[samp, ]
}
simulate_outcome <- function(data){
form <- out ~ cover + (1|time/plot/subplot)
data$out <- 1
glF <- glFormula(form, data = data)
data$out <- NULL
rtrms <- glF$reTrms
Z <- t(rtrms$Zt)
# Pre-choose beta, sigma and b
beta <- c(-2, 0.75) # picked out of thin air
# We need a correlation matrix for our random effects.
# I go with the same definition as the one used by lme4
delta <- sqrt(c(.3, .7, 1.0))
lambda <- delta[rtrms$Lind] # crossprod(lambda) = sigma
u <- rnorm(ncol(Z))
eta <- glF$X %*% beta + Z %*% (lambda * u)
expit <- function(x)
1 / ( 1 + exp(-x) )
# Simulate our outcome vector
df$eaten <- rbinom(nobs, 1, prob = as.numeric(expit(eta)))
# Add not eaten for cbind method
df$not_eaten <- 1 - df$eaten
df
}
model <- function(data){
fit_standard <- glmer(eaten ~ cover + (1|time/plot/subplot), data = data, family = binomial)
fit_cbind <- glmer(cbind(eaten, not_eaten) ~ cover + (1|time/plot/subplot), data = data, family = binomial)
c(fixef = all.equal(fixef(fit_standard), fixef(fit_cbind)),
ranef = all.equal(ranef(fit_standard),ranef(fit_cbind)))
}
data <- simulate_data()
data <- simulate_outcome(data)
debugonce(simulate_outcome)
data <- simulate_data()
data <- simulate_outcome(data)
eta
nobs
comparison <- model(data)
library(lme4)
simulate_data <- function(){
totalobs <- 4 * 9 * 90 * 25
subplot <- rep(1:4, totalobs / 4)
plot <- rep(1:90, totalobs / 90)
time <- rep(2012:2020, totalobs / 9)
cover <- rep(runif(90), totalobs / 90)
# obs after sampling
nobs <- 55000
# Extract data sample
samp <- sample(nobs)
data.frame(subplot, plot, time, cover)[samp, ]
}
simulate_outcome <- function(data){
form <- out ~ cover + (1|time/plot/subplot)
data$out <- 1
glF <- glFormula(form, data = data)
data$out <- NULL
rtrms <- glF$reTrms
Z <- t(rtrms$Zt)
# Pre-choose beta, sigma and b
beta <- c(-2, 0.75) # picked out of thin air
# We need a correlation matrix for our random effects.
# I go with the same definition as the one used by lme4
delta <- sqrt(c(.3, .7, 1.0))
lambda <- delta[rtrms$Lind] # crossprod(lambda) = sigma
u <- rnorm(ncol(Z))
eta <- glF$X %*% beta + Z %*% (lambda * u)
expit <- function(x)
1 / ( 1 + exp(-x) )
# Simulate our outcome vector
df$eaten <- rbinom(55000, 1, prob = as.numeric(expit(eta)))
# Add not eaten for cbind method
df$not_eaten <- 1 - df$eaten
df
}
model <- function(data){
fit_standard <- glmer(eaten ~ cover + (1|time/plot/subplot), data = data, family = binomial)
fit_cbind <- glmer(cbind(eaten, not_eaten) ~ cover + (1|time/plot/subplot), data = data, family = binomial)
c(fixef = all.equal(fixef(fit_standard), fixef(fit_cbind)),
ranef = all.equal(ranef(fit_standard),ranef(fit_cbind)))
}
data <- simulate_data()
data <- simulate_outcome(data)
stop_server()
serve_site()
stop_server()
gsub('\\^', '\\\\^', '^')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1', '^')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1', '.')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1\\2\\3\\4', '.')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1\\2\\3\\4', '*')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1\\2\\3\\4', '?')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1\\2\\3\\4', '^*?')
gsub('(\\^)|(\\.)|(\\?)|(\\*)', '\\\\\\1\\2\\3\\4', '^*.?')
?txtProgressBar
?parallel::parLapply
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
find_args(c('abcd', 'defg'), '--', '-')
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
strings <- lapply(10^(1:4), sim_make)
p <- lapply(strings, function(x)find_args_c(x, '-', '--'))
paste0(sample(c('-', '--', ''), 1000, TRUE),
sample(letters[-8], 1000, TRUE))
strings <- lapply(10^(1:4), sim_make)
paste0(sample(c('-', '--', ''), n, TRUE),
sample(letters[-8], n, TRUE))
sim_make <- function(n)
paste0(sample(c('-', '--', ''), n, TRUE),
sample(letters[-8], n, TRUE))
strings <- lapply(10^(1:4), sim_make)
p <- lapply(strings, function(x)find_args_c(x, '-', '--'))
microbenchmark::microbenchmark(substr = lapply(seq_along(strings),
function(i)substr(strings[[i]][p[[i]]],
attr(p[[i]], 'arglen'),
nchar(strings[[i]][p[[i]]])))[[1]],
substr_c = lapply(seq_along(strings),
function(i)substring_c(strings[[i]][p[[i]]],
attr(p[[i]], 'arglen'))))
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
substring_c
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
microbenchmark::microbenchmark(substr = lapply(seq_along(strings),
function(i)substr(strings[[i]][p[[i]]],
attr(p[[i]], 'arglen'),
nchar(strings[[i]][p[[i]]])))[[1]],
substr_c = lapply(seq_along(strings),
function(i)substring_c(strings[[i]][p[[i]]],
attr(p[[i]], 'arglen'))))
microbenchmark::microbenchmark(substr = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substr(str,
attr(p, 'arglen'),
nchar(str)))[[1]]
},
substr_c = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substring_c(str,
attr(p, 'arglen')))
})
substr_c = lapply(seq_along(strings),
microbenchmark::microbenchmark(substr = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substr(str,
attr(p, 'arglen'),
nchar(str))
}),
substr_c = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substring_c(str,
attr(p, 'arglen'))
}))
substring('abcd', 1, 3)
substring(c('abcd', 'defg'), 1, 3)
microbenchmark::microbenchmark(substr = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substr(str,
attr(p, 'arglen'),
nchar(str))
}),
substr_c = lapply(seq_along(strings),
function(i){
p <- p[[i]]
str <- strings[[i]][p]
substring_c(str,
attr(p, 'arglen'))
}),
substring = lapply(seq_along(strings), function(i){
p <- p[[i]]
str <- strings[[i]][p]
substring(str,
attr(p, 'arglen'),
nchar(str))
}))
substr
substring
#' Function for ordering arguments according to some string
#'
#' @description
#'
#' @return integer vector that gives the numeric order of the input vector.
order_arg <- function(args, argpos){
args <- args[argpos]
order(substring_c(args[argpos], attr(arg, 'argpos')))
}
order_arg(strings, p)
order_arg(strings[[4]], p[[$]])
order_arg(strings[[4]], p[[4]])
#' Function for ordering arguments according to some string
#'
#' @description
#'
#' @return integer vector that gives the numeric order of the input vector.
order_arg <- function(args, argpos){
args <- args[argpos]
order(substring_c(args[argpos], attr(argpos, 'arglen')))
}
order_arg(strings[[4]], p[[4]])
order_arg(strings[[1]], p[[1]])
strings[[1]]
p[[1]]
args <- c('efgh', '--gijs', '-abcd')
p <- c(2, 3)
attr(p, 'arglen') <- c(2, 1)
order_arg(args, p)
#' @description
#'
#' @return integer vector that gives the numeric order of the indices in the
#' input vector.
#'
#' @examples
#' args <- c('efgh', '--gijs', '-abcd')
#' p <- c(2, 3)
#' attr(p, 'arglen') <- c(2, 1)
#' order_arg(args, p)
order_arg <- function(args, argpos){
args <- args[argpos]
order(argpos[substring_c(args[argpos], attr(argpos, 'arglen'))])
}
order_arg(args, p)
#' @description
#'
#' @return integer vector that gives the numeric order of the indices in the
#' input vector.
#'
#' @examples
#' args <- c('efgh', '--gijs', '-abcd')
#' p <- c(2, 3)
#' attr(p, 'arglen') <- c(2, 1)
#' order_arg(args, p)
order_arg <- function(args, argpos){
args <- args[argpos]
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
order_arg(args, p)
args <- c(args, '--aacc')
p <- c(p, 4)
attr(p, 'arglen') <- c(2, 1, 2)
order_arg(args, p)
args <- c(args, '--qqq')
p <- c(p, 5)
attr(p, 'arglen') <- c(2, 1, 4, 5)
order_arg(args, p)
attr(p, 'arglen') <- c(2, 1, 2, 2)
order_arg(args, p)
#'
#' args <- c(args, '--aacc')
#' p <- c(p, 4)
#' attr(p, 'arglen') <- c(2, 1, 2)
#' order_arg(args, p)
#'
#' args <- c(args, '--qqq')
#' p <- c(p, 5)
#' attr(p, 'arglen') <- c(2, 1, 2, 2)
#' order_arg(args, p)
order_arg <- function(args, argpos){
args <- args[argpos]
browser()
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
order_arg(args, p)
substring_c(args[argpos], attr(argpos, 'arglen'))
args
argpos
args <- c('efgh', '--gijs', '-abcd')
p <- c(2, 3)
attr(p, 'arglen') <- c(2, 1)
order_arg(args, p)
function(args, argpos){
args <- args[argpos]
browser()
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
#'
#' args <- c(args, '--aacc')
#' p <- c(p, 4)
#' attr(p, 'arglen') <- c(2, 1, 2)
#' order_arg(args, p)
#'
#' args <- c(args, '--qqq')
#' p <- c(p, 5)
#' attr(p, 'arglen') <- c(2, 1, 2, 2)
#' order_arg(args, p)
order_arg <- function(args, argpos){
args <- args[argpos]
#browser()
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
args <- c(args, '--aacc')
p <- c(p, 4)
attr(p, 'arglen') <- c(2, 1, 2)
order_arg(args, p)
args <- c(args, '--qqq')
args
p <- c(p, 5)
attr(p, 'arglen') <- c(2, 1, 2, 2)
order_arg(args, p)
#'
#' args <- c(args, '--aacc')
#' p <- c(p, 4)
#' attr(p, 'arglen') <- c(2, 1, 2)
#' order_arg(args, p)
#'
#' args <- c(args, '--qqq')
#' p <- c(p, 5)
#' attr(p, 'arglen') <- c(2, 1, 2, 2)
#' order_arg(args, p)
order_arg <- function(args, argpos){
args <- args[argpos]
browser()
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
order_arg(args, p)
args[argpos]
argpos
#'
#' args <- c(args, '--aacc')
#' p <- c(p, 4)
#' attr(p, 'arglen') <- c(2, 1, 2)
#' order_arg(args, p)
#'
#' args <- c(args, '--qqq')
#' p <- c(p, 5)
#' attr(p, 'arglen') <- c(2, 1, 2, 2)
#' order_arg(args, p)
order_arg <- function(args, argpos){
argpos[order(substring_c(args[argpos], attr(argpos, 'arglen')))]
}
order_arg(args, p)
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
order_arg(args, p)
rm(sim_make)
rm(strings)
#'
#' @returns An integer vector indicating the positions that started with either
#' sarg or larg. If both are provided the integer indicates larg over sarg to
#' avoid any confusion between "-" and "--" (or equivalent).
#' The vector contains an attribute 'arglen' indicating the end position for
#' the argument indicator.
#'
#' @importFrom rlang abort
#'
#' @export
find_args <- function(args = commandArgs(TRUE), sarg, larg){
ms <- missing(sarg)
ml <- missing(larg)
if(ms && ml)
rlang::abort("Both sarg and larg is missing. At least one must be specified")
else if(ms){
if(length(larg) > 1)
rlang::abort("More than one long argument was supplied.
Please provide only a single argument for larg.")
# is short arg is missing
args <- find_args_single_c(args, larg)
attr(args, 'arglen') <- rep(nchar(larg), length(args))
args
}else if(ml){
if(length(sarg) > 1)
rlang::abort("More than one short argument was supplied.
Please provide only a single argument for sarg.")
# if long arg is missing
args <- find_args_single_c(args, sarg)
attr(args, 'arglen') <- rep(nchar(sarg), length(args))
args
}else{
if(sarg == larg)
rlang::abort("sarg and larg are identical. Please specify different arguments!")
if(nchar(larg) < nchar(sarg)){
temp <- larg
larg <- sarg
sarg <- temp
}
# If both are provided
find_args_c(args, sarg, larg)
}
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
sort(c('aa', 'a'))
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
listtest(list("A" = c('A', 'B'), 'B' = c('G', 'F')))
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
listtest(list("A" = c('A', 'B'), 'B' = c('G', 'F')))
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
?ggplot2::scale_colour_manual
library(ggplot2)
data(mtcars)
mtcars
data(iris)
mtcars
iris
head(iris)
pc <- pca(iris[1:4])
pc <- prcomp(iris[1:4])
pc
pc$x
iris
head(pc$x)
iris2 <- data.frame(cbind(pc$x, iris))
iris2
head(iris2)
table(iris$Species)
ggplot2(iris2, aes(y = PC1, x = PC2)) +
geom_point(aes(col = Species)) +
scale_colour_manual(labels = c('Se', 'Ve', 'Vi'),
values = c('#303030', '#606060', '#909090'))
library(ggplot2)
ggplot2(iris2, aes(y = PC1, x = PC2)) +
geom_point(aes(col = Species)) +
scale_colour_manual(labels = c('Se', 'Ve', 'Vi'),
values = c('#303030', '#606060', '#909090'))
ggplot(iris2, aes(y = PC1, x = PC2)) +
geom_point(aes(col = Species)) +
scale_colour_manual(labels = c('Se', 'Ve', 'Vi'),
values = c('#303030', '#606060', '#909090'))
ggplot(iris2, aes(y = PC1, x = Species)) +
geom_point(aes(col = Species)) +
scale_colour_manual(labels = c('Se', 'Ve', 'Vi'),
values = c('#303030', '#606060', '#909090'))
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
?sourceCpp
Rcpp::sourceCpp('C:/Users/olive/Desktop/character_test.cpp')
c(3, 34, 44, 3)
c(3, 34, 43334, 3)
cat(c(3, 34, 43334, 3))
