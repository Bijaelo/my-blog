invisible()
}
# Fix number of deaths. Fix date format and add cumulative total
fix_deaths <- function(deaths, ...){
names(deaths) <- c('Dato', 'death_count')
data.table::copy(deaths[-.N, .(Dato = as.IDate(Dato),
cumulative_total = cumsum(death_count))])
}
# Fix number of cases. Sum across regions and add cumulative total
fix_cases <- function(cases, ...)
cases %>% rowwise() %>%
mutate(total = sum(c_across(-date_sample))) %>%
select(date_sample, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix number of admitted patients. Sum across regions and add cumulative total
fix_admitted <- function(admitted, ...)
admitted %>% rowwise() %>%
mutate(total = sum(c_across(-Dato))) %>%
select(Dato, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix number of tests. Sum across regions and add cumulative total
fix_test <- function(test, ...)
test %>% rowwise() %>%
mutate(total = sum(c_across(-PrDate_adjusted))) %>%
select(PrDate_adjusted, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
download_covid_files(last_date,
"https://covid19.ssi.dk/overvagningsdata/download-fil-med-overvaagningdata",
'(data-epidemiologiske-rapport-[0-9]{4}(2020)-(.*)?)$')
unzip_files('./data_files')
#unzip(fp, exdir = gsub('\\.zip', '', fp))
# Convert deaths
convert('Deaths_over_time\\.csv$', './data_files/deaths', fix_deaths)
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos))
browser()
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
View(test_pos)
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
names(test_pos)
?data.table::setnames
sapply(test_pos, class)
View(test_pos)
substr(paste0(LETTERS, collapse = ''), 1, 3)
# Fixing function, after noticing some files are different early in the publication process
fix_test_pos_special <- function(test_pos, ...){
setnames(test_pos,
names(test_pos),
c('Date', 'NewPositive', 'Tested', 'PosPct'))
test_pos[, Date := fix_date(Date)]
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
test_pos[, NewPositive := as.numeric(gsub('\\.', '', NewPositive))]
test_pos[, Tested := as.numeric(gsub('\\.', '', Tested))]
test_pos[, Tested_kumulativ := cumsum(Tested)]
test_pos
}
library(xml2)
library(rvest)
library(tidyverse)
library(data.table)
# Download all files from a given URL based on a search given by file_pattern.
download_covid_files <- function(last_date, url, file_pattern){
# Import the html page
pg <- read_html(url)
# Find nodes that contain links
links <- html_attr(html_nodes(pg, "a"), "href")
# Extract relevant links (identified by pattern)
data_files <- links[grepl(file_pattern, links)]
# Extract date from file name
data_files_dates <-
as.Date(sapply(strsplit(basename(data_files), '-'), function(x)
as.character(as.Date(x[4], format = '%d%m%Y'))))
# Download files into ./data_files/*.zip
if(!dir.exists('./data_files/'))
dir.create('./data_files')
data_files <- data_files[data_files_dates < last_date]
for(i in data_files)
outfile <- file.path('./data_files',
paste0(basename(i), '.zip'))
if(!file.exists(outfile))
download.file(i,
outfile,
method = 'curl', extra = '-L')
invisible()
}
# Iterate over each downloaded zip file in a directory and unzip them
unzip_files <- function(dir, .unlink = FALSE){
files <- list.files(path = dir,
pattern = '\\.zip$',
full.names = TRUE,
recursive = FALSE)
for(i in files){
outdir <- gsub('\\.zip', '', i)
if(!dir.exists(outdir))
unzip(i, exdir = outdir)
}
if(.unlink)
unlink(files, force = TRUE, expand = FALSE)
invisible()
}
# Convert files given a specific pattern and fixfun out to a specific directory
convert <- function(pattern, outdir, fixfun, dec = '.', ...){
# find files within data_files given pattern
files <- list.files('./data_files',
pattern = pattern,
recursive = TRUE,
full.names = TRUE)
if(!dir.exists(outdir))
dir.create(outdir, recursive = TRUE)
for(i in files){
# Extract the file
dir_date <- as.Date(strsplit(gsub('(.*)?/', '', dirname(i)), '-')[[1]][4],
format = '%d%m%Y')
outfile <- paste0(as.character(dir_date), '.csv')
df <- fixfun(fread(i, dec = dec), ...)
df[, stream_date := dir_date]
fwrite(df, file.path(outdir, outfile))
}
invisible()
}
# Fix number of deaths. Fix date format and add cumulative total
fix_deaths <- function(deaths, ...){
setnames(deaths, names(deaths), c('Dato', 'death_count'))
data.table::copy(deaths[-.N, .(Dato = as.IDate(Dato),
cumulative_total = cumsum(death_count))])
}
# Fix number of cases. Sum across regions and add cumulative total
fix_cases <- function(cases, ...)
cases %>% rowwise() %>%
mutate(total = sum(c_across(-date_sample))) %>%
select(date_sample, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix number of admitted patients. Sum across regions and add cumulative total
fix_admitted <- function(admitted, ...)
admitted %>% rowwise() %>%
mutate(total = sum(c_across(-Dato))) %>%
select(Dato, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix number of tests. Sum across regions and add cumulative total
fix_test <- function(test, ...)
test %>% rowwise() %>%
mutate(total = sum(c_across(-PrDate_adjusted))) %>%
select(PrDate_adjusted, total) %>%
ungroup() %>%
mutate(cumulative_total = cumsum(total)) %>%
data.table::copy()
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos))
browser()
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Fixing function, after noticing some files are different early in the publication process
fix_test_pos_special <- function(test_pos, ...){
setnames(test_pos,
names(test_pos),
c('Date', 'NewPositive', 'Tested', 'PosPct'))
test_pos[, Date := fix_date(Date)]
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
test_pos[, NewPositive := as.numeric(gsub('\\.', '', NewPositive))]
test_pos[, Tested := as.numeric(gsub('\\.', '', Tested))]
test_pos[, Tested_kumulativ := cumsum(Tested)]
test_pos
}
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x$Date)), ' ')
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
}
download_covid_files(last_date,
"https://covid19.ssi.dk/overvagningsdata/download-fil-med-overvaagningdata",
'(data-epidemiologiske-rapport-[0-9]{4}(2020)-(.*)?)$')
unzip_files('./data_files')
#unzip(fp, exdir = gsub('\\.zip', '', fp))
# Convert deaths
convert('Deaths_over_time\\.csv$', './data_files/deaths', fix_deaths)
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Convert tests
convert('Municipality_tested_persons_time_series\\.csv$', './data_files/tests', fix_tests)
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos))
return(fix_test_pos_special(test_pos, ...))
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if(!is.data.table(test_pos))
browser()
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos))
return(fix_test_pos_special(test_pos, ...))
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if(!is.data.table(test_pos))
browser()
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos)){
browser()
return(fix_test_pos_special(test_pos, ...))
}
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
n
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
3+3
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
fix_test_pos_special(test_pos, ...)
debugonce(fix_test_pos_special)
fix_test_pos_special(test_pos, ...)
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
# Fix test_pos. Change date to proper format, fix numeric columns.
fix_test_pos <- function(test_pos, ...){
if(!is.data.table(test_pos))
browser()
if('PosPct' %in% names(test_pos) && !is.numeric(test_pos$PosPct))
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
if(!'Date' %in% names(test_pos)){
return(fix_test_pos_special(test_pos, ...))
}
if(sum(sapply(test_pos, is.numeric)) == ncol(test_pos) - 1)
test_pos[-((.N - 1):(.N))] %>%
mutate(Date = as.IDate(Date)) %>%
data.table::copy()
else
test_pos[-((.N - 1):(.N))] %>%
mutate(across(-c(Date, where(is.numeric)),
function(x)as.numeric(gsub('\\.', '', x))),
Date = as.IDate(Date)) %>%
data.table::copy()
}
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
browser()
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
})
sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
], '-',
x[1])
})
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
], '-',
x[1])
}))
sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
], '-',
x[1])
})
tail(dates)
# Fixing function, after noticing some files are different early in the publication process
fix_test_pos_special <- function(test_pos, ...){
setnames(test_pos,
names(test_pos),
c('Date', 'NewPositive', 'Tested', 'PosPct'))
test_pos <- copy(test_pos[-.N])
test_pos[, Date := fix_date(Date)]
test_pos[, PosPct := as.numeric(gsub(',', '.', PosPct))]
test_pos[, NewPositive := as.numeric(gsub('\\.', '', NewPositive))]
test_pos[, Tested := as.numeric(gsub('\\.', '', Tested))]
test_pos[, Tested_kumulativ := cumsum(Tested)]
test_pos
}
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
browser()
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
],
x[1])
}))
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
browser()
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
], '-',
x[1])
}))
}
fix_date <- function(x){
dates <- strsplit(trimws(gsub('\\.', '', x)), ' ')
as.Date(sapply(dates, function(x){
paste0('2020-',
(1:12)[
match(tolower(substr(x[2], 1, 3)),
c('jan', 'feb', 'mar', 'apr', 'maj', 'jun',
'jul', 'aug', 'sep', 'okt', 'nov', 'dec')
)
], '-',
x[1])
}))
}
# Convert test_pos
convert('Test_pos_over_time\\.csv$', './data_files/test_pos', fix_test_pos, dec = ',')
stop_server()
table
data.table
data.frame
gsub
lm
table
body(table)
unclass(body(table))
length(body(table))
body(table)[[1]]
body(table)[[2]]
